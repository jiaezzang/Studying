//세균 증식
//1시간에 두배만큼 증식하는 세균이 있을 때 처음 세균의 마리수 n과 경과한 시간 t에 대한 세균의 수 return

function solution(n, t) {
    return n * Math.pow(2, t); //Math.pow(x,y) 메서드는 x의 y제곱을 반환한다.
}

//다른 사람의 풀이
function solution2(n, t) {
    return n << t;          //비트이동 연산자. x >> y : 정수 x의 각 비트를 y만큼 오른쪽으로 이동(빈자리는 정수 a의 최상위 부호비트와 같은 값으로 채워짐)
  }                         //                x << y : 정수 x의 각 비트를 y만큼 왼쪽으로 이동 (빈자리는 0으로 채워짐)
                            // 따라서 n << t 는 n을 32비트로 분해한 후 왼쪽으로 t만큼 이동시키는 연산